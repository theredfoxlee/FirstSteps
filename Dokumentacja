Ten plik oraz projekt w budowie.

Dokumentacja Projektu

Krótki opis:
Projektem jest quasi-klon gry Reigns. Gracz wciela się w króla, zarządzającego swoimi włościami. Gra opiera się na reakcjach na kolejne wydarzenia, które mają wpływ na statystyki królestwa (wpływ wśród kleru, na armię, zdrowie króla, bogactwo dworu). Celem gry jest osiągnięcie jak najdłuższego czasu panowania. Gra kończy się wraz z utratą wpływów wśród poddanych, utratą zdrowia, pieniędzy. 

Część dla programistów:
Projekt został napisany w środowisku Qt. Do napisania części front-endowej użyte zostały QML oraz JavaScript. Za logikę aplikacji odpowiada C++.
Struktury, przechowujące dane związane z grą:
- Player (Player.h) – informacje o graczu,
- Realm (Realm.h) – statystyki królestwa,
- Data (Data.h) – zbiorcze informacje o aktualnej grze,
- Event (Event.h) – pojedyncze wydarzenie.
Każda ze struktur posiada konstruktor do wygodniejszej inicjalizacji.
Klasą główną jest Controller (Controller.h). Jest to pochodna klasy QObject, dzięki czemu możliwym jest wykorzystanie w niej rozszerzeń języka C++ - m. in. propert, sygnałów i slotów.
Nagłówek klasy Controller zawiera: 
- Q_PROPERTY typu QString - odpowiadające za wyświetlane informacje - przy pomocy których QML synchronizuje UI,
- Instancje Data (_data) oraz (_event), w których przechowywane są dane, do których dostęp jest możliwy za pomocą propert,
- Controller(QObject *parent=0) jest konstruktorem wymaganym przez QObject, określającym rodzica naszej klasy (zgodnie z systemem rodzic-dzieci),
- Controller(Data data, const QVector<Event> &events) jest konstruktorem wykorzystywanym do inicjalizacji rozgrywki,
- void update(bool) jest funkcją, która (po rozpoznaniu decyzji gracza) aktualizuje statystyki królestwa oraz wyświetla nowy event; dostępna w QML za sprawą poprzedzającego ją makra (Q_INVOKABLE),
- gettery dla propert (np. clergy()) zwracające odpowiednie dane jako QString
- sygnały emitowane przy zmianie stanu propert (np.clergyChanged())
- setter (sloty) dla propert (np. setClergy(QString))
- funkcje pomocnicze: update(Event::Influence), wieńcząca aktualizację statystyk królestwa, strutkurą przesłaną jako argument; getRandomEvent, losująca losowe wydarzenie z QVector<Event> _events; syncRealm(), syncTime(), syncEvent(), które emitują sygnały o zmianie wartości propert, ergo potrzeby ich aktualizacji,
Plik Controller.cpp zawiera implementacje definicji z Controller.h
W pliku main.cpp rozpoczyna się działanie aplikacji. Dochodzi do inicjalizacji QGuiApplication oraz uruchomienia pętli zdarzeń – przed czym stworzono instancję struktury, przechowującej dane o grze (Data), przy czym wczytano wydarzenia (funkcją getEvents). Następnie utworzono instancję klasy Controller.
Obiekt klasy Controller dodany został kontekstu, wiążąc go tym samym z QML, którego plik został następnie załadowany.
W pliku main.qml napisane zostało okienko aplikacji.
